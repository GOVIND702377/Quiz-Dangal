{
  "tables": [
    {
      "schema": "public",
      "table": "admins",
      "rls_enabled": true
    },
    {
      "schema": "public",
      "table": "badges",
      "rls_enabled": true
    },
    {
      "schema": "public",
      "table": "leaderboard_snapshot",
      "rls_enabled": true
    },
    {
      "schema": "public",
      "table": "levels",
      "rls_enabled": true
    },
    {
      "schema": "public",
      "table": "options",
      "rls_enabled": true
    },
    {
      "schema": "public",
      "table": "profiles",
      "rls_enabled": true
    },
    {
      "schema": "public",
      "table": "questions",
      "rls_enabled": true
    },
    {
      "schema": "public",
      "table": "quiz_participants",
      "rls_enabled": true
    },
    {
      "schema": "public",
      "table": "quiz_prizes",
      "rls_enabled": true
    },
    {
      "schema": "public",
      "table": "quiz_results",
      "rls_enabled": true
    },
    {
      "schema": "public",
      "table": "quizzes",
      "rls_enabled": true
    },
    {
      "schema": "public",
      "table": "redemptions",
      "rls_enabled": true
    },
    {
      "schema": "public",
      "table": "referrals",
      "rls_enabled": true
    },
    {
      "schema": "public",
      "table": "reward_catalog",
      "rls_enabled": true
    },
    {
      "schema": "public",
      "table": "transactions",
      "rls_enabled": true
    },
    {
      "schema": "public",
      "table": "user_answers",
      "rls_enabled": true
    },
    {
      "schema": "public",
      "table": "user_badges",
      "rls_enabled": true
    },
    {
      "schema": "public",
      "table": "user_streaks",
      "rls_enabled": true
    }
  ],
  "columns": [
    {
      "schema": "public",
      "table": "admins",
      "column_name": "id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "admins",
      "column_name": "full_name",
      "data_type": "text",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "admins",
      "column_name": "email",
      "data_type": "text",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "admins",
      "column_name": "password_hash",
      "data_type": "text",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "admins",
      "column_name": "role",
      "data_type": "text",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "admins",
      "column_name": "created_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "all_time_leaderboard",
      "column_name": "user_id",
      "data_type": "uuid",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "all_time_leaderboard",
      "column_name": "full_name",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "all_time_leaderboard",
      "column_name": "coins_earned",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "all_time_leaderboard",
      "column_name": "coins_spent",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "all_time_leaderboard",
      "column_name": "referrals",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "all_time_leaderboard",
      "column_name": "streak_count",
      "data_type": "integer",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "all_time_leaderboard",
      "column_name": "badges",
      "data_type": "ARRAY",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "all_time_leaderboard",
      "column_name": "weekly_firsts",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "all_time_leaderboard",
      "column_name": "weekly_seconds",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "all_time_leaderboard",
      "column_name": "weekly_thirds",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "all_time_leaderboard",
      "column_name": "monthly_firsts",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "all_time_leaderboard",
      "column_name": "monthly_seconds",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "all_time_leaderboard",
      "column_name": "monthly_thirds",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "all_time_leaderboard",
      "column_name": "total_rewards",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "all_time_leaderboard",
      "column_name": "grand_total",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "badges",
      "column_name": "id",
      "data_type": "integer",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "badges",
      "column_name": "name",
      "data_type": "text",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "badges",
      "column_name": "criteria",
      "data_type": "text",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "leaderboard",
      "column_name": "full_name",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard",
      "column_name": "level",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard",
      "column_name": "total_earned",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard",
      "column_name": "total_spent",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard",
      "column_name": "total_referrals",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard",
      "column_name": "streak_count",
      "data_type": "integer",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard",
      "column_name": "badges",
      "data_type": "ARRAY",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_monthly",
      "column_name": "full_name",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_monthly",
      "column_name": "level",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_monthly",
      "column_name": "coins_earned",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_monthly",
      "column_name": "coins_spent",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_monthly",
      "column_name": "referrals",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_monthly",
      "column_name": "streak_count",
      "data_type": "integer",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_monthly",
      "column_name": "badges",
      "data_type": "ARRAY",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_snapshot",
      "column_name": "id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "leaderboard_snapshot",
      "column_name": "full_name",
      "data_type": "text",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "leaderboard_snapshot",
      "column_name": "coins_earned",
      "data_type": "numeric",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "leaderboard_snapshot",
      "column_name": "rank",
      "data_type": "integer",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "leaderboard_snapshot",
      "column_name": "period",
      "data_type": "text",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "leaderboard_snapshot",
      "column_name": "reward_amount",
      "data_type": "numeric",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "leaderboard_snapshot",
      "column_name": "snapshot_date",
      "data_type": "date",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "leaderboard_snapshot",
      "column_name": "user_id",
      "data_type": "uuid",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_view",
      "column_name": "quiz_id",
      "data_type": "uuid",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_view",
      "column_name": "user_id",
      "data_type": "uuid",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_view",
      "column_name": "full_name",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_view",
      "column_name": "email",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_view",
      "column_name": "rank",
      "data_type": "integer",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_view",
      "column_name": "score",
      "data_type": "integer",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_view",
      "column_name": "wallet_balance",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_view",
      "column_name": "total_earned",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_view",
      "column_name": "created_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_weekly",
      "column_name": "full_name",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_weekly",
      "column_name": "level",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_weekly",
      "column_name": "coins_earned",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_weekly",
      "column_name": "coins_spent",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_weekly",
      "column_name": "referrals",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_weekly",
      "column_name": "streak_count",
      "data_type": "integer",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "leaderboard_weekly",
      "column_name": "badges",
      "data_type": "ARRAY",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "levels",
      "column_name": "id",
      "data_type": "integer",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "levels",
      "column_name": "name",
      "data_type": "text",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "levels",
      "column_name": "min_coins",
      "data_type": "integer",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "levels",
      "column_name": "max_coins",
      "data_type": "integer",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "options",
      "column_name": "id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "options",
      "column_name": "question_id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "options",
      "column_name": "option_text",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "options",
      "column_name": "is_correct",
      "data_type": "boolean",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "options",
      "column_name": "updated_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "full_name",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "phone_number",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "wallet_balance",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "role",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "updated_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "email",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "total_earned",
      "data_type": "numeric",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "total_spent",
      "data_type": "numeric",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "streak_count",
      "data_type": "integer",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "highest_streak",
      "data_type": "integer",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "quizzes_played",
      "data_type": "integer",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "quizzes_won",
      "data_type": "integer",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "badges",
      "data_type": "ARRAY",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "referral_code",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "referred_by",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "account_status",
      "data_type": "text",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "created_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "level",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "username",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "profiles",
      "column_name": "avatar_url",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "questions",
      "column_name": "id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "questions",
      "column_name": "quiz_id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "questions",
      "column_name": "question_text",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "questions",
      "column_name": "position",
      "data_type": "smallint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "questions",
      "column_name": "created_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "questions",
      "column_name": "updated_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "quiz_participants",
      "column_name": "id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "quiz_participants",
      "column_name": "user_id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "quiz_participants",
      "column_name": "joined_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quiz_participants",
      "column_name": "quiz_id",
      "data_type": "uuid",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quiz_participants",
      "column_name": "score",
      "data_type": "integer",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quiz_participants",
      "column_name": "rank",
      "data_type": "integer",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quiz_participants",
      "column_name": "status",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quiz_participants",
      "column_name": "updated_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quiz_prizes",
      "column_name": "id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "quiz_prizes",
      "column_name": "quiz_id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "quiz_prizes",
      "column_name": "rank_from",
      "data_type": "integer",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "quiz_prizes",
      "column_name": "rank_to",
      "data_type": "integer",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "quiz_prizes",
      "column_name": "prize_coins",
      "data_type": "numeric",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "quiz_prizes",
      "column_name": "created_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "quiz_prizes",
      "column_name": "updated_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quiz_results",
      "column_name": "id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "quiz_results",
      "column_name": "quiz_id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "quiz_results",
      "column_name": "leaderboard",
      "data_type": "jsonb",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "quiz_results",
      "column_name": "created_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quiz_results",
      "column_name": "result_shown_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quiz_results",
      "column_name": "updated_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quiz_results",
      "column_name": "user_id",
      "data_type": "uuid",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quizzes",
      "column_name": "id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "quizzes",
      "column_name": "title",
      "data_type": "text",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "quizzes",
      "column_name": "entry_fee",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quizzes",
      "column_name": "prize_pool",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quizzes",
      "column_name": "start_time",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quizzes",
      "column_name": "end_time",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quizzes",
      "column_name": "result_time",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quizzes",
      "column_name": "status",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quizzes",
      "column_name": "prizes",
      "data_type": "jsonb",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quizzes",
      "column_name": "created_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quizzes",
      "column_name": "updated_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "quizzes",
      "column_name": "category",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "redemptions",
      "column_name": "id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "redemptions",
      "column_name": "user_id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "redemptions",
      "column_name": "reward_type",
      "data_type": "text",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "redemptions",
      "column_name": "reward_value",
      "data_type": "text",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "redemptions",
      "column_name": "coins_required",
      "data_type": "integer",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "redemptions",
      "column_name": "status",
      "data_type": "text",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "redemptions",
      "column_name": "requested_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "redemptions",
      "column_name": "processed_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "redemptions",
      "column_name": "catalog_id",
      "data_type": "uuid",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "referrals",
      "column_name": "id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "referrals",
      "column_name": "referrer_id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "referrals",
      "column_name": "referred_id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "referrals",
      "column_name": "bonus_coins",
      "data_type": "numeric",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "referrals",
      "column_name": "created_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "referrals",
      "column_name": "updated_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "reward_catalog",
      "column_name": "id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "reward_catalog",
      "column_name": "reward_type",
      "data_type": "text",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "reward_catalog",
      "column_name": "reward_value",
      "data_type": "text",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "reward_catalog",
      "column_name": "coins_required",
      "data_type": "integer",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "reward_catalog",
      "column_name": "is_active",
      "data_type": "boolean",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "transactions",
      "column_name": "id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "transactions",
      "column_name": "user_id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "transactions",
      "column_name": "type",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "transactions",
      "column_name": "amount",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "transactions",
      "column_name": "status",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "transactions",
      "column_name": "created_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "transactions",
      "column_name": "updated_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "user_answers",
      "column_name": "id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "user_answers",
      "column_name": "user_id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "user_answers",
      "column_name": "question_id",
      "data_type": "uuid",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "user_answers",
      "column_name": "selected_option_id",
      "data_type": "uuid",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "user_answers",
      "column_name": "answered_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "user_answers",
      "column_name": "updated_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "user_badges",
      "column_name": "user_id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "user_badges",
      "column_name": "badge_id",
      "data_type": "integer",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "user_badges",
      "column_name": "earned_at",
      "data_type": "timestamp without time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "user_streaks",
      "column_name": "user_id",
      "data_type": "uuid",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "user_streaks",
      "column_name": "last_active_date",
      "data_type": "date",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "user_streaks",
      "column_name": "streak_count",
      "data_type": "integer",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "user_streaks",
      "column_name": "last_claimed_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "user_streaks",
      "column_name": "created_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "user_streaks",
      "column_name": "updated_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "NO"
    },
    {
      "schema": "public",
      "table": "v_coins_flow",
      "column_name": "total_issued",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_coins_flow",
      "column_name": "total_spent",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_coins_flow",
      "column_name": "total_refunded",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_coins_flow",
      "column_name": "net_balance",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_coins_summary",
      "column_name": "total_issued",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_coins_summary",
      "column_name": "total_spent",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_coins_summary",
      "column_name": "net_balance",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_daily_active_users",
      "column_name": "day",
      "data_type": "date",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_daily_active_users",
      "column_name": "active_users",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_daily_coins_flow",
      "column_name": "day",
      "data_type": "date",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_daily_coins_flow",
      "column_name": "coins_issued",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_daily_coins_flow",
      "column_name": "coins_spent",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_daily_coins_flow",
      "column_name": "coins_refunded",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_pending_redemptions",
      "column_name": "id",
      "data_type": "uuid",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_pending_redemptions",
      "column_name": "full_name",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_pending_redemptions",
      "column_name": "reward_type",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_pending_redemptions",
      "column_name": "reward_value",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_pending_redemptions",
      "column_name": "coins_required",
      "data_type": "integer",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_pending_redemptions",
      "column_name": "requested_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_redemption_stats",
      "column_name": "status",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_redemption_stats",
      "column_name": "total_requests",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_redemption_stats",
      "column_name": "total_coins",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_referral_leaderboard",
      "column_name": "full_name",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_referral_leaderboard",
      "column_name": "total_referrals",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_top_earners",
      "column_name": "full_name",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_top_earners",
      "column_name": "total_earned",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_top_earners",
      "column_name": "wallet_balance",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_top_spenders",
      "column_name": "full_name",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_top_spenders",
      "column_name": "total_spent",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_user_quiz_results",
      "column_name": "id",
      "data_type": "uuid",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_user_quiz_results",
      "column_name": "quiz_id",
      "data_type": "uuid",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_user_quiz_results",
      "column_name": "user_id",
      "data_type": "uuid",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_user_quiz_results",
      "column_name": "leaderboard",
      "data_type": "jsonb",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_user_quiz_results",
      "column_name": "created_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_user_quiz_results",
      "column_name": "result_shown_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_user_quiz_results",
      "column_name": "updated_at",
      "data_type": "timestamp with time zone",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_weekly_coins_flow",
      "column_name": "week_start",
      "data_type": "date",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_weekly_coins_flow",
      "column_name": "coins_issued",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_weekly_coins_flow",
      "column_name": "coins_spent",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "v_weekly_coins_flow",
      "column_name": "coins_refunded",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "winner_analytics",
      "column_name": "user_id",
      "data_type": "uuid",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "winner_analytics",
      "column_name": "full_name",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "winner_analytics",
      "column_name": "weekly_firsts",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "winner_analytics",
      "column_name": "weekly_seconds",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "winner_analytics",
      "column_name": "weekly_thirds",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "winner_analytics",
      "column_name": "monthly_firsts",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "winner_analytics",
      "column_name": "monthly_seconds",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "winner_analytics",
      "column_name": "monthly_thirds",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "winner_analytics",
      "column_name": "total_rewards",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "winners_report",
      "column_name": "full_name",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "winners_report",
      "column_name": "coins_earned",
      "data_type": "numeric",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "winners_report",
      "column_name": "rank",
      "data_type": "bigint",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "winners_report",
      "column_name": "period",
      "data_type": "text",
      "is_nullable": "YES"
    },
    {
      "schema": "public",
      "table": "winners_report",
      "column_name": "reward_amount",
      "data_type": "integer",
      "is_nullable": "YES"
    }
  ],
  "triggers": [
    {
      "schema": "public",
      "table": "options",
      "trigger_name": "trg_options_updated",
      "definition": "CREATE TRIGGER trg_options_updated BEFORE UPDATE ON options FOR EACH ROW EXECUTE FUNCTION set_updated_at()"
    },
    {
      "schema": "public",
      "table": "profiles",
      "trigger_name": "trg_assign_level",
      "definition": "CREATE TRIGGER trg_assign_level AFTER UPDATE OF total_earned ON profiles FOR EACH ROW EXECUTE FUNCTION assign_level()"
    },
    {
      "schema": "public",
      "table": "profiles",
      "trigger_name": "trg_profiles_updated",
      "definition": "CREATE TRIGGER trg_profiles_updated BEFORE UPDATE ON profiles FOR EACH ROW EXECUTE FUNCTION set_updated_at()"
    },
    {
      "schema": "public",
      "table": "profiles",
      "trigger_name": "trg_reward_referral",
      "definition": "CREATE TRIGGER trg_reward_referral AFTER INSERT ON profiles FOR EACH ROW EXECUTE FUNCTION reward_referral()"
    },
    {
      "schema": "public",
      "table": "questions",
      "trigger_name": "trg_questions_updated",
      "definition": "CREATE TRIGGER trg_questions_updated BEFORE UPDATE ON questions FOR EACH ROW EXECUTE FUNCTION set_updated_at()"
    },
    {
      "schema": "public",
      "table": "quiz_participants",
      "trigger_name": "trg_quiz_participants_updated",
      "definition": "CREATE TRIGGER trg_quiz_participants_updated BEFORE UPDATE ON quiz_participants FOR EACH ROW EXECUTE FUNCTION set_updated_at()"
    },
    {
      "schema": "public",
      "table": "quiz_prizes",
      "trigger_name": "trg_quiz_prizes_updated",
      "definition": "CREATE TRIGGER trg_quiz_prizes_updated BEFORE UPDATE ON quiz_prizes FOR EACH ROW EXECUTE FUNCTION set_updated_at()"
    },
    {
      "schema": "public",
      "table": "quiz_results",
      "trigger_name": "trg_after_quiz_result",
      "definition": "CREATE TRIGGER trg_after_quiz_result AFTER INSERT ON quiz_results FOR EACH ROW EXECUTE FUNCTION after_quiz_result_check()"
    },
    {
      "schema": "public",
      "table": "quiz_results",
      "trigger_name": "trg_quiz_results_updated",
      "definition": "CREATE TRIGGER trg_quiz_results_updated BEFORE UPDATE ON quiz_results FOR EACH ROW EXECUTE FUNCTION set_updated_at()"
    },
    {
      "schema": "public",
      "table": "quizzes",
      "trigger_name": "trg_quizzes_finish_compute",
      "definition": "CREATE TRIGGER trg_quizzes_finish_compute AFTER UPDATE ON quizzes FOR EACH ROW EXECUTE FUNCTION trg_quiz_finished_compute()"
    },
    {
      "schema": "public",
      "table": "quizzes",
      "trigger_name": "trg_quizzes_updated",
      "definition": "CREATE TRIGGER trg_quizzes_updated BEFORE UPDATE ON quizzes FOR EACH ROW EXECUTE FUNCTION set_updated_at()"
    },
    {
      "schema": "public",
      "table": "referrals",
      "trigger_name": "trg_after_referral",
      "definition": "CREATE TRIGGER trg_after_referral AFTER INSERT ON referrals FOR EACH ROW EXECUTE FUNCTION after_referral_check()"
    },
    {
      "schema": "public",
      "table": "referrals",
      "trigger_name": "trg_referrals_updated",
      "definition": "CREATE TRIGGER trg_referrals_updated BEFORE UPDATE ON referrals FOR EACH ROW EXECUTE FUNCTION set_updated_at()"
    },
    {
      "schema": "public",
      "table": "transactions",
      "trigger_name": "trg_after_activity",
      "definition": "CREATE TRIGGER trg_after_activity AFTER INSERT ON transactions FOR EACH ROW WHEN (new.type = 'activity'::text) EXECUTE FUNCTION after_activity_check()"
    },
    {
      "schema": "public",
      "table": "transactions",
      "trigger_name": "trg_transactions_updated",
      "definition": "CREATE TRIGGER trg_transactions_updated BEFORE UPDATE ON transactions FOR EACH ROW EXECUTE FUNCTION set_updated_at()"
    },
    {
      "schema": "public",
      "table": "user_answers",
      "trigger_name": "trg_user_answers_updated",
      "definition": "CREATE TRIGGER trg_user_answers_updated BEFORE UPDATE ON user_answers FOR EACH ROW EXECUTE FUNCTION set_updated_at()"
    },
    {
      "schema": "public",
      "table": "user_streaks",
      "trigger_name": "set_updated_at_user_streaks",
      "definition": "CREATE TRIGGER set_updated_at_user_streaks BEFORE UPDATE ON user_streaks FOR EACH ROW EXECUTE FUNCTION set_updated_at()"
    }
  ],
  "policies": [
    {
      "schema": "public",
      "table": "admins",
      "policyname": "Admins: service_role manage",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(auth.role() = 'service_role'::text)",
      "with_check": "(auth.role() = 'service_role'::text)"
    },
    {
      "schema": "public",
      "table": "badges",
      "policyname": "badges_read_auth",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "leaderboard_snapshot",
      "policyname": "Leaderboard snapshot: admin read",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "leaderboard_snapshot",
      "policyname": "Leaderboard snapshot: service_role manage",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(auth.role() = 'service_role'::text)",
      "with_check": "(auth.role() = 'service_role'::text)"
    },
    {
      "schema": "public",
      "table": "levels",
      "policyname": "levels_read_auth",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "options",
      "policyname": "Options: admin manage",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM profiles p\n  WHERE ((p.id = auth.uid()) AND (p.role = 'admin'::text))))",
      "with_check": "(EXISTS ( SELECT 1\n   FROM profiles p\n  WHERE ((p.id = auth.uid()) AND (p.role = 'admin'::text))))"
    },
    {
      "schema": "public",
      "table": "options",
      "policyname": "Options: select all",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "options",
      "policyname": "Options: service_role manage",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(auth.role() = 'service_role'::text)",
      "with_check": "(auth.role() = 'service_role'::text)"
    },
    {
      "schema": "public",
      "table": "profiles",
      "policyname": "Allow user to insert own profile",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(auth.uid() = id)"
    },
    {
      "schema": "public",
      "table": "profiles",
      "policyname": "Allow user to read own profile",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(auth.uid() = id)",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "profiles",
      "policyname": "Allow user to update own profile",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "UPDATE",
      "qual": "(auth.uid() = id)",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "profiles",
      "policyname": "Profiles: admin manage",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM profiles p\n  WHERE ((p.id = auth.uid()) AND (p.role = 'admin'::text))))",
      "with_check": "(EXISTS ( SELECT 1\n   FROM profiles p\n  WHERE ((p.id = auth.uid()) AND (p.role = 'admin'::text))))"
    },
    {
      "schema": "public",
      "table": "profiles",
      "policyname": "Profiles: select co-participants",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "((EXISTS ( SELECT 1\n   FROM (quiz_participants qp_me\n     JOIN quiz_participants qp_them ON ((qp_me.quiz_id = qp_them.quiz_id)))\n  WHERE ((qp_me.user_id = auth.uid()) AND (qp_them.user_id = profiles.id)))) OR (EXISTS ( SELECT 1\n   FROM profiles p\n  WHERE ((p.id = auth.uid()) AND (p.role = 'admin'::text)))))",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "profiles",
      "policyname": "profiles_all_access",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(auth.uid() = id)",
      "with_check": "(auth.uid() = id)"
    },
    {
      "schema": "public",
      "table": "questions",
      "policyname": "Questions: admin manage",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM profiles p\n  WHERE ((p.id = auth.uid()) AND (p.role = 'admin'::text))))",
      "with_check": "(EXISTS ( SELECT 1\n   FROM profiles p\n  WHERE ((p.id = auth.uid()) AND (p.role = 'admin'::text))))"
    },
    {
      "schema": "public",
      "table": "questions",
      "policyname": "Questions: select all",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "questions",
      "policyname": "Questions: service_role manage",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(auth.role() = 'service_role'::text)",
      "with_check": "(auth.role() = 'service_role'::text)"
    },
    {
      "schema": "public",
      "table": "quiz_participants",
      "policyname": "Allow users to see only their participation",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(user_id = auth.uid())",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "quiz_participants",
      "policyname": "Participants: insert self",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(user_id = auth.uid())"
    },
    {
      "schema": "public",
      "table": "quiz_participants",
      "policyname": "Participants: select own + same quiz",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "((user_id = auth.uid()) OR (quiz_id IN ( SELECT quiz_participants_1.quiz_id\n   FROM quiz_participants quiz_participants_1\n  WHERE (quiz_participants_1.user_id = auth.uid()))) OR (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text)))))",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "quiz_participants",
      "policyname": "Participants: update own",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "UPDATE",
      "qual": "(user_id = auth.uid())",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "quiz_participants",
      "policyname": "Users can join quizzes",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(user_id = auth.uid())"
    },
    {
      "schema": "public",
      "table": "quiz_participants",
      "policyname": "Users can view their own participation",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(auth.uid() = user_id)",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "quiz_participants",
      "policyname": "Users can view their own quiz participation",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(user_id = auth.uid())",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "quiz_prizes",
      "policyname": "Quiz prizes: service_role manage",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(auth.role() = 'service_role'::text)",
      "with_check": "(auth.role() = 'service_role'::text)"
    },
    {
      "schema": "public",
      "table": "quiz_results",
      "policyname": "Results: admin manage",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
      "with_check": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))"
    },
    {
      "schema": "public",
      "table": "quiz_results",
      "policyname": "Results: select participants of quiz",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "((EXISTS ( SELECT 1\n   FROM quiz_participants qp\n  WHERE ((qp.quiz_id = quiz_results.quiz_id) AND (qp.user_id = auth.uid())))) OR (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text)))))",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "quizzes",
      "policyname": "Quizzes: admin manage",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM profiles p\n  WHERE ((p.id = auth.uid()) AND (p.role = 'admin'::text))))",
      "with_check": "(EXISTS ( SELECT 1\n   FROM profiles p\n  WHERE ((p.id = auth.uid()) AND (p.role = 'admin'::text))))"
    },
    {
      "schema": "public",
      "table": "quizzes",
      "policyname": "Quizzes: select all",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "quizzes",
      "policyname": "Quizzes: service_role manage",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(auth.role() = 'service_role'::text)",
      "with_check": "(auth.role() = 'service_role'::text)"
    },
    {
      "schema": "public",
      "table": "redemptions",
      "policyname": "Redemptions: admin manage",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
      "with_check": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))"
    },
    {
      "schema": "public",
      "table": "redemptions",
      "policyname": "Users can insert their own redemptions",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(auth.uid() = user_id)"
    },
    {
      "schema": "public",
      "table": "redemptions",
      "policyname": "Users can see their own redemptions",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(auth.uid() = user_id)",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "referrals",
      "policyname": "Referrals: admin read-all",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "referrals",
      "policyname": "Users can see their referrals",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "((auth.uid() = referrer_id) OR (auth.uid() = referred_id))",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "reward_catalog",
      "policyname": "Reward catalog: admin manage",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "((auth.role() = 'service_role'::text) OR (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text)))))",
      "with_check": "((auth.role() = 'service_role'::text) OR (EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text)))))"
    },
    {
      "schema": "public",
      "table": "reward_catalog",
      "policyname": "reward_catalog_read_auth",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "transactions",
      "policyname": "Transactions: admin manage",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM profiles p\n  WHERE ((p.id = auth.uid()) AND (p.role = 'admin'::text))))",
      "with_check": "(EXISTS ( SELECT 1\n   FROM profiles p\n  WHERE ((p.id = auth.uid()) AND (p.role = 'admin'::text))))"
    },
    {
      "schema": "public",
      "table": "transactions",
      "policyname": "Transactions: admin read-all",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "transactions",
      "policyname": "Transactions: select own",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(user_id = auth.uid())",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "transactions",
      "policyname": "Transactions: service_role manage",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(auth.role() = 'service_role'::text)",
      "with_check": "(auth.role() = 'service_role'::text)"
    },
    {
      "schema": "public",
      "table": "transactions",
      "policyname": "insert_own_activity",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "((auth.uid() = user_id) AND (type = 'activity'::text) AND (amount = (0)::numeric))"
    },
    {
      "schema": "public",
      "table": "user_answers",
      "policyname": "User answers: insert own",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(user_id = auth.uid())"
    },
    {
      "schema": "public",
      "table": "user_answers",
      "policyname": "User answers: select own",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(user_id = auth.uid())",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "user_answers",
      "policyname": "User answers: update own",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "UPDATE",
      "qual": "(user_id = auth.uid())",
      "with_check": "(user_id = auth.uid())"
    },
    {
      "schema": "public",
      "table": "user_badges",
      "policyname": "User badges: admin read-all",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "user_badges",
      "policyname": "User badges: service_role manage",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(auth.role() = 'service_role'::text)",
      "with_check": "(auth.role() = 'service_role'::text)"
    },
    {
      "schema": "public",
      "table": "user_badges",
      "policyname": "Users can see their own badges",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(auth.uid() = user_id)",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "user_badges",
      "policyname": "Users can select own rows",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(auth.uid() = user_id)",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "user_streaks",
      "policyname": "User streaks: admin read-all",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(EXISTS ( SELECT 1\n   FROM profiles\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::text))))",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "user_streaks",
      "policyname": "Users can see their own streaks",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(auth.uid() = user_id)",
      "with_check": null
    },
    {
      "schema": "public",
      "table": "user_streaks",
      "policyname": "streaks_ins_own",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(user_id = auth.uid())"
    },
    {
      "schema": "public",
      "table": "user_streaks",
      "policyname": "streaks_upd_own",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "UPDATE",
      "qual": "(user_id = auth.uid())",
      "with_check": "(user_id = auth.uid())"
    }
  ],
  "functions": [
    {
      "schema": "public",
      "function": "after_activity_check",
      "definition": "CREATE OR REPLACE FUNCTION public.after_activity_check()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  begin\r\n    perform public.update_streak(NEW.user_id);\r\n    return NEW;\r\n  end\r\n  $function$\n"
    },
    {
      "schema": "public",
      "function": "after_quiz_result_check",
      "definition": "CREATE OR REPLACE FUNCTION public.after_quiz_result_check()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n    perform check_quiz_champion(new.user_id);\r\n    return new;\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "after_referral_check",
      "definition": "CREATE OR REPLACE FUNCTION public.after_referral_check()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n    perform check_referral_king(new.referrer_id);\r\n    return new;\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "after_transaction_check",
      "definition": "CREATE OR REPLACE FUNCTION public.after_transaction_check()\n RETURNS trigger\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n    perform check_big_spender(new.user_id);\r\n    return new;\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "approve_latest_redemption",
      "definition": "CREATE OR REPLACE FUNCTION public.approve_latest_redemption(p_email text, p_reward_value text)\n RETURNS text\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\ndeclare\r\n    r_id uuid;\r\nbegin\r\n    select r.id into r_id\r\n    from public.redemptions r\r\n    join public.profiles p on p.id = r.user_id\r\n    where p.email = p_email\r\n      and r.reward_value = p_reward_value\r\n      and r.status = 'pending'\r\n    order by r.requested_at desc\r\n    limit 1;\r\n\r\n    if not found then\r\n        return 'No pending redemption found';\r\n    end if;\r\n\r\n    return approve_redemption(r_id);\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "approve_redemption",
      "definition": "CREATE OR REPLACE FUNCTION public.approve_redemption(p_redemption_id uuid)\n RETURNS text\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n    update public.redemptions\r\n    set status = 'completed',\r\n        processed_at = now()\r\n    where id = p_redemption_id\r\n      and status = 'pending';\r\n\r\n    if not found then\r\n        return 'Invalid or Already Processed';\r\n    end if;\r\n\r\n    return 'Redemption Approved';\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "assign_level",
      "definition": "CREATE OR REPLACE FUNCTION public.assign_level()\n RETURNS trigger\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n    update profiles\r\n    set level = (\r\n        select l.name\r\n        from levels l\r\n        where new.total_earned >= l.min_coins\r\n          and (l.max_coins is null or new.total_earned <= l.max_coins)\r\n        limit 1\r\n    )\r\n    where id = new.id;\r\n    return new;\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "award_monthly_winners",
      "definition": "CREATE OR REPLACE FUNCTION public.award_monthly_winners()\n RETURNS void\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\ndeclare\r\n    r record;\r\n    rank_counter int := 1;\r\nbegin\r\n    for r in\r\n        select p.id as user_id, p.full_name, \r\n               coalesce(sum(t.amount) filter (where t.type in ('credit','reward','bonus')),0) as coins_earned\r\n        from profiles p\r\n        left join transactions t on t.user_id = p.id\r\n            and t.created_at >= date_trunc('month', now())\r\n        group by p.id, p.full_name\r\n        order by coins_earned desc\r\n        limit 3\r\n    loop\r\n        if rank_counter = 1 then\r\n            insert into transactions(id, user_id, type, amount, status, created_at)\r\n            values (gen_random_uuid(), r.user_id, 'reward', 500, 'success', now());\r\n        elsif rank_counter = 2 then\r\n            insert into transactions(id, user_id, type, amount, status, created_at)\r\n            values (gen_random_uuid(), r.user_id, 'reward', 250, 'success', now());\r\n        elsif rank_counter = 3 then\r\n            insert into transactions(id, user_id, type, amount, status, created_at)\r\n            values (gen_random_uuid(), r.user_id, 'reward', 100, 'success', now());\r\n        end if;\r\n        rank_counter := rank_counter + 1;\r\n    end loop;\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "award_weekly_winners",
      "definition": "CREATE OR REPLACE FUNCTION public.award_weekly_winners()\n RETURNS void\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\ndeclare\r\n    r record;\r\n    rank_counter int := 1;\r\nbegin\r\n    for r in\r\n        select p.id as user_id, p.full_name, \r\n               coalesce(sum(t.amount) filter (where t.type in ('credit','reward','bonus')),0) as coins_earned\r\n        from profiles p\r\n        left join transactions t on t.user_id = p.id\r\n            and t.created_at >= date_trunc('week', now())\r\n        group by p.id, p.full_name\r\n        order by coins_earned desc\r\n        limit 3\r\n    loop\r\n        if rank_counter = 1 then\r\n            insert into transactions(id, user_id, type, amount, status, created_at)\r\n            values (gen_random_uuid(), r.user_id, 'reward', 100, 'success', now());\r\n        elsif rank_counter = 2 then\r\n            insert into transactions(id, user_id, type, amount, status, created_at)\r\n            values (gen_random_uuid(), r.user_id, 'reward', 50, 'success', now());\r\n        elsif rank_counter = 3 then\r\n            insert into transactions(id, user_id, type, amount, status, created_at)\r\n            values (gen_random_uuid(), r.user_id, 'reward', 25, 'success', now());\r\n        end if;\r\n        rank_counter := rank_counter + 1;\r\n    end loop;\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "check_big_spender",
      "definition": "CREATE OR REPLACE FUNCTION public.check_big_spender(user_uuid uuid)\n RETURNS void\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n    if (select coalesce(sum(amount),0)\r\n        from transactions\r\n        where user_id = user_uuid and type in ('purchase','debit')) >= 500 then\r\n        insert into user_badges(user_id, badge_id)\r\n        select user_uuid, id from badges where name = 'Big Spender'\r\n        on conflict do nothing;\r\n    end if;\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "check_quiz_champion",
      "definition": "CREATE OR REPLACE FUNCTION public.check_quiz_champion(user_uuid uuid)\n RETURNS void\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n    if (select count(*) from quiz_results\r\n        where user_id = user_uuid and rank = 1) >= 10 then\r\n        insert into user_badges(user_id, badge_id)\r\n        select user_uuid, id from badges where name = 'Quiz Champion'\r\n        on conflict do nothing;\r\n    end if;\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "check_referral_king",
      "definition": "CREATE OR REPLACE FUNCTION public.check_referral_king(user_uuid uuid)\n RETURNS void\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n    if (select count(*) from referrals where referrer_id = user_uuid) >= 5 then\r\n        insert into user_badges(user_id, badge_id)\r\n        select user_uuid, id from badges where name = 'Referral King'\r\n        on conflict do nothing;\r\n    end if;\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "compute_quiz_results",
      "definition": "CREATE OR REPLACE FUNCTION public.compute_quiz_results(p_quiz_id uuid)\n RETURNS TABLE(result_id uuid, result_quiz_id uuid, leaderboard jsonb, created_at timestamp with time zone, result_shown_at timestamp with time zone)\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\ndeclare\r\n  v_leaderboard jsonb := '[]'::jsonb;\r\nbegin\r\n  if p_quiz_id is null then\r\n    raise exception 'compute_quiz_results: quiz_id is null. Provide a valid quiz id.';\r\n  end if;\r\n\r\n  with\r\n  qns(question_id) as (\r\n    select q.id as question_id\r\n    from public.questions q\r\n    where q.quiz_id = p_quiz_id\r\n  ),\r\n  counts as (\r\n    select ua.question_id, ua.selected_option_id, count(*) as cnt\r\n    from public.user_answers ua\r\n    join qns on qns.question_id = ua.question_id\r\n    join public.quiz_participants qp\r\n      on qp.user_id = ua.user_id and qp.quiz_id = p_quiz_id\r\n    group by ua.question_id, ua.selected_option_id\r\n  ),\r\n  majority as (\r\n    select c.question_id,\r\n           (array_agg(c.selected_option_id order by c.cnt desc, c.selected_option_id asc))[1] as majority_option_id,\r\n           max(c.cnt) as max_cnt\r\n    from counts c\r\n    group by c.question_id\r\n  ),\r\n  correct_answers as (\r\n    select ua.user_id, ua.question_id, ua.answered_at\r\n    from public.user_answers ua\r\n    join majority m\r\n      on m.question_id = ua.question_id\r\n     and m.majority_option_id = ua.selected_option_id\r\n  ),\r\n  scores as (\r\n    select qp.user_id,\r\n           coalesce(count(ca.question_id), 0) as score,\r\n           min(ca.answered_at) as tie_break_time\r\n    from public.quiz_participants qp\r\n    left join correct_answers ca on ca.user_id = qp.user_id\r\n    where qp.quiz_id = p_quiz_id\r\n    group by qp.user_id\r\n  ),\r\n  ranked as (\r\n    select qp.user_id,\r\n           s.score,\r\n           coalesce(s.tie_break_time, 'infinity'::timestamptz) as tie_break_time,\r\n           qp.joined_at,\r\n           dense_rank() over (\r\n             order by s.score desc,\r\n                      coalesce(s.tie_break_time, 'infinity'::timestamptz) asc,\r\n                      qp.joined_at asc\r\n           ) as rnk\r\n    from public.quiz_participants qp\r\n    join scores s on s.user_id = qp.user_id\r\n    where qp.quiz_id = p_quiz_id\r\n  )\r\n  select coalesce(\r\n           (\r\n             select jsonb_agg(\r\n               jsonb_build_object(\r\n                 'user_id', r.user_id,\r\n                 'display_name', coalesce(p.full_name, split_part(coalesce(p.email,''),'@',1), 'Player'),\r\n                 'score', r.score,\r\n                 'rank', r.rnk\r\n               )\r\n               order by r.rnk asc\r\n             )\r\n             from ranked r\r\n             join public.profiles p on p.id = r.user_id\r\n           ),\r\n           '[]'::jsonb\r\n         )\r\n    into v_leaderboard;\r\n\r\n  insert into public.quiz_results (quiz_id, leaderboard)\r\n  values (p_quiz_id, v_leaderboard)\r\n  on conflict (quiz_id)\r\n  do update set leaderboard = excluded.leaderboard,\r\n               created_at = now(),\r\n               result_shown_at = now();\r\n\r\n  update public.quizzes\r\n     set status = 'completed',\r\n         result_time = coalesce(result_time, now())\r\n   where id = p_quiz_id\r\n     and status in ('active','finished','upcoming');\r\n\r\n  return query\r\n    select qr.id as result_id,\r\n           qr.quiz_id as result_quiz_id,\r\n           qr.leaderboard,\r\n           qr.created_at,\r\n           qr.result_shown_at\r\n    from public.quiz_results qr\r\n    where qr.quiz_id = p_quiz_id;\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "export_all_data",
      "definition": "CREATE OR REPLACE FUNCTION public.export_all_data()\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    result jsonb := '{}'::jsonb;\r\n    rec   record;\r\nBEGIN\r\n    -- αñ╕αñ¡αÑÇ αñƒαÑçαñ¼αñ▓ αñ¿αñ╛αñ« αñ¬αÑìαñ░αñ╛αñ¬αÑìαññ αñòαñ░αÑçαñé (public αñ╕αÑìαñòαÑÇαñ«αñ╛ αñ«αÑçαñé)\r\n    FOR rec IN\r\n        SELECT table_name\r\n        FROM information_schema.tables\r\n        WHERE table_schema = 'public'\r\n          AND table_type = 'BASE TABLE'\r\n    LOOP\r\n        EXECUTE format(\r\n            'SELECT jsonb_agg(t) FROM (SELECT * FROM %I) t',\r\n            rec.table_name\r\n        ) INTO result;\r\n        -- αñ¬αñ░αñ┐αñúαñ╛αñ« αñòαÑï αñƒαÑçαñ¼αñ▓ΓÇæαñ¿αñ╛αñ« αñòαÑÇ αñòαÑÇ αñòαÑç αñ╕αñ╛αñÑ αñ£αÑïαñíαñ╝αÑçαñé\r\n        result := jsonb_set(\r\n                    result,\r\n                    ARRAY[rec.table_name],\r\n                    coalesce(result, '[]'::jsonb)\r\n                  );\r\n    END LOOP;\r\n    RETURN result;\r\nEND;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "finalize_quiz_results",
      "definition": "CREATE OR REPLACE FUNCTION public.finalize_quiz_results(p_quiz_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\ndeclare\r\n    r record;\r\n    prize record;\r\n    user_rank int := 1;\r\nbegin\r\n    -- Purana result delete\r\n    delete from public.quiz_results where quiz_id = p_quiz_id;\r\n\r\n    -- Scores calculate karo (options.is_correct use karke)\r\n    for r in\r\n        select ua.user_id,\r\n               sum(case when o.is_correct then 1 else 0 end) as score\r\n        from public.user_answers ua\r\n        join public.questions q on q.id = ua.question_id\r\n        join public.options o on o.id = ua.selected_option_id\r\n        where q.quiz_id = p_quiz_id\r\n        group by ua.user_id\r\n        order by score desc\r\n    loop\r\n        -- Quiz results me insert\r\n        insert into public.quiz_results (id, quiz_id, leaderboard, created_at)\r\n        values (\r\n            gen_random_uuid(),\r\n            p_quiz_id,\r\n            jsonb_build_object(\r\n                'user_id', r.user_id,\r\n                'rank', user_rank,\r\n                'score', r.score\r\n            ),\r\n            now()\r\n        );\r\n\r\n        -- Prize distribute karo\r\n        for prize in\r\n            select * from public.quiz_prizes\r\n            where quiz_id = p_quiz_id\r\n              and user_rank between rank_from and rank_to\r\n        loop\r\n            -- Transaction\r\n            insert into public.transactions (id, user_id, type, amount, status, created_at)\r\n            values (gen_random_uuid(), r.user_id, 'credit', prize.prize_coins, 'success', now());\r\n\r\n            -- Wallet update\r\n            update public.profiles\r\n            set wallet_balance = wallet_balance + prize.prize_coins,\r\n                total_earned = total_earned + prize.prize_coins\r\n            where id = r.user_id;\r\n        end loop;\r\n\r\n        user_rank := user_rank + 1;\r\n    end loop;\r\n\r\n    -- Mark quiz completed\r\n    update public.quizzes\r\n    set status = 'completed',\r\n        updated_at = now()\r\n    where id = p_quiz_id;\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "join_quiz",
      "definition": "CREATE OR REPLACE FUNCTION public.join_quiz(p_user_id uuid, p_quiz_id uuid)\n RETURNS text\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\ndeclare\r\n    quiz_entry_fee int;\r\n    user_balance int;\r\nbegin\r\n    -- Quiz ka entry fee check karo\r\n    select entry_fee into quiz_entry_fee from public.quizzes where id = p_quiz_id;\r\n\r\n    -- User balance check karo\r\n    select wallet_balance into user_balance from public.profiles where id = p_user_id;\r\n\r\n    if user_balance < quiz_entry_fee then\r\n        return 'Insufficient Balance';\r\n    end if;\r\n\r\n    -- Deduct coins\r\n    update public.profiles\r\n    set wallet_balance = wallet_balance - quiz_entry_fee\r\n    where id = p_user_id;\r\n\r\n    -- Insert transaction\r\n    insert into public.transactions (id, user_id, type, amount, status, created_at)\r\n    values (gen_random_uuid(), p_user_id, 'purchase', quiz_entry_fee, 'success', now());\r\n\r\n    -- Add participant\r\n    insert into public.quiz_participants (id, user_id, quiz_id, joined_at)\r\n    values (gen_random_uuid(), p_user_id, p_quiz_id, now());\r\n\r\n    return 'Joined Successfully';\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "process_pending_quizzes",
      "definition": "CREATE OR REPLACE FUNCTION public.process_pending_quizzes()\n RETURNS void\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\ndeclare\r\n    q record;\r\nbegin\r\n    for q in\r\n        select id from public.quizzes\r\n        where end_time < now()\r\n          and status = 'active'\r\n    loop\r\n        perform finalize_quiz_results(q.id);\r\n    end loop;\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "redeem_from_catalog",
      "definition": "CREATE OR REPLACE FUNCTION public.redeem_from_catalog(p_user_id uuid, p_catalog_id uuid)\n RETURNS text\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\ndeclare\r\n    user_balance int;\r\n    catalog_item record;\r\nbegin\r\n    -- Fetch catalog item\r\n    select * into catalog_item from public.reward_catalog\r\n    where id = p_catalog_id and is_active = true;\r\n\r\n    if not found then\r\n        return 'Invalid Reward';\r\n    end if;\r\n\r\n    -- Check balance\r\n    select wallet_balance into user_balance from public.profiles where id = p_user_id;\r\n\r\n    if user_balance < catalog_item.coins_required then\r\n        return 'Insufficient Balance';\r\n    end if;\r\n\r\n    -- Deduct coins\r\n    update public.profiles\r\n    set wallet_balance = wallet_balance - catalog_item.coins_required\r\n    where id = p_user_id;\r\n\r\n    -- Insert transaction\r\n    insert into public.transactions (id, user_id, type, amount, status, created_at)\r\n    values (gen_random_uuid(), p_user_id, 'debit', catalog_item.coins_required, 'success', now());\r\n\r\n    -- Insert redemption\r\n    insert into public.redemptions (user_id, reward_type, reward_value, coins_required, catalog_id)\r\n    values (p_user_id, catalog_item.reward_type, catalog_item.reward_value, catalog_item.coins_required, p_catalog_id);\r\n\r\n    return 'Redemption Request Submitted';\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "redeem_reward",
      "definition": "CREATE OR REPLACE FUNCTION public.redeem_reward(p_user_id uuid, p_reward_type text, p_reward_value text, p_coins_required integer)\n RETURNS text\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\ndeclare\r\n    user_balance int;\r\nbegin\r\n    -- Check balance\r\n    select wallet_balance into user_balance from public.profiles where id = p_user_id;\r\n\r\n    if user_balance < p_coins_required then\r\n        return 'Insufficient Balance';\r\n    end if;\r\n\r\n    -- Deduct coins\r\n    update public.profiles\r\n    set wallet_balance = wallet_balance - p_coins_required\r\n    where id = p_user_id;\r\n\r\n    -- Insert transaction\r\n    insert into public.transactions (id, user_id, type, amount, status, created_at)\r\n    values (gen_random_uuid(), p_user_id, 'debit', p_coins_required, 'success', now());\r\n\r\n    -- Insert redemption request\r\n    insert into public.redemptions (user_id, reward_type, reward_value, coins_required)\r\n    values (p_user_id, p_reward_type, p_reward_value, p_coins_required);\r\n\r\n    return 'Redemption Request Submitted';\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "refresh_analytics",
      "definition": "CREATE OR REPLACE FUNCTION public.refresh_analytics()\n RETURNS void\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n    -- Daily coins flow\r\n    refresh materialized view concurrently mv_daily_coins_flow;\r\n\r\n    -- Weekly coins flow\r\n    refresh materialized view concurrently mv_weekly_coins_flow;\r\n\r\n    -- Winners report\r\n    refresh materialized view concurrently mv_winners_report;\r\n\r\n    -- All time leaderboard\r\n    refresh materialized view concurrently mv_all_time_leaderboard;\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "refresh_leaderboards_all",
      "definition": "CREATE OR REPLACE PROCEDURE public.refresh_leaderboards_all()\n LANGUAGE plpgsql\nAS $procedure$\r\nBEGIN\r\n  REFRESH MATERIALIZED VIEW public.mv_all_time_leaderboard;\r\n  REFRESH MATERIALIZED VIEW public.mv_daily_active_users;\r\n  REFRESH MATERIALIZED VIEW public.mv_daily_coins_flow;\r\n  REFRESH MATERIALIZED VIEW public.mv_weekly_coins_flow;\r\n  REFRESH MATERIALIZED VIEW public.mv_redemption_stats;\r\n  REFRESH MATERIALIZED VIEW public.mv_winners_report;\r\nEND;\r\n$procedure$\n"
    },
    {
      "schema": "public",
      "function": "reject_latest_redemption",
      "definition": "CREATE OR REPLACE FUNCTION public.reject_latest_redemption(p_email text, p_reward_value text, p_reason text DEFAULT NULL::text)\n RETURNS text\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\ndeclare\r\n    r_id uuid;\r\nbegin\r\n    -- Get latest pending redemption\r\n    select r.id into r_id\r\n    from public.redemptions r\r\n    join public.profiles p on p.id = r.user_id\r\n    where p.email = p_email\r\n      and r.reward_value = p_reward_value\r\n      and r.status = 'pending'\r\n    order by r.requested_at desc\r\n    limit 1;\r\n\r\n    if not found then\r\n        return 'No pending redemption found';\r\n    end if;\r\n\r\n    -- Reject it\r\n    update public.redemptions\r\n    set status = 'rejected',\r\n        processed_at = now()\r\n    where id = r_id;\r\n\r\n    -- (Optional) refund coins\r\n    -- update public.profiles set wallet_balance = wallet_balance + r.coins_required\r\n    -- from public.redemptions r where r.id = r_id and profiles.id = r.user_id;\r\n    -- insert into public.transactions (id, user_id, type, amount, status, created_at)\r\n    -- select gen_random_uuid(), r.user_id, 'refund', r.coins_required, 'success', now()\r\n    -- from public.redemptions r where r.id = r_id;\r\n\r\n    return coalesce('Redemption Rejected: ' || p_reason, 'Redemption Rejected');\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "reject_redemption",
      "definition": "CREATE OR REPLACE FUNCTION public.reject_redemption(p_redemption_id uuid, p_reason text DEFAULT NULL::text)\n RETURNS text\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n    update public.redemptions\r\n    set status = 'rejected',\r\n        processed_at = now()\r\n    where id = p_redemption_id\r\n      and status = 'pending';\r\n\r\n    if not found then\r\n        return 'Invalid or Already Processed';\r\n    end if;\r\n\r\n    -- Optionally: refund coins to user\r\n    -- insert into transactions + update profiles.wallet_balance here\r\n    -- if you want auto refund on rejection\r\n\r\n    return coalesce('Redemption Rejected: ' || p_reason, 'Redemption Rejected');\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "reward_referral",
      "definition": "CREATE OR REPLACE FUNCTION public.reward_referral()\n RETURNS trigger\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n    if new.referred_by is not null then\r\n        -- Referrer ko reward (e.g. 50 coins)\r\n        insert into public.transactions (id, user_id, type, amount, status, created_at)\r\n        values (gen_random_uuid(), new.referred_by, 'referral', 50, 'success', now());\r\n\r\n        update public.profiles\r\n        set wallet_balance = wallet_balance + 50,\r\n            total_earned = total_earned + 50\r\n        where id = new.referred_by;\r\n\r\n        -- Referred user ko bonus (e.g. 20 coins)\r\n        insert into public.transactions (id, user_id, type, amount, status, created_at)\r\n        values (gen_random_uuid(), new.id, 'referral', 20, 'success', now());\r\n\r\n        update public.profiles\r\n        set wallet_balance = wallet_balance + 20,\r\n            total_earned = total_earned + 20\r\n        where id = new.id;\r\n    end if;\r\n    return new;\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "set_updated_at",
      "definition": "CREATE OR REPLACE FUNCTION public.set_updated_at()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nbegin\r\n  new.updated_at := now();\r\n  return new;\r\nend\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "take_winners_snapshot",
      "definition": "CREATE OR REPLACE FUNCTION public.take_winners_snapshot()\n RETURNS void\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n    insert into leaderboard_snapshot (user_id, full_name, coins_earned, rank, period, reward_amount, snapshot_date)\r\n    select p.id, p.full_name, wr.coins_earned, wr.rank, wr.period, wr.reward_amount, current_date\r\n    from mv_winners_report wr\r\n    join profiles p on p.full_name = wr.full_name;\r\nend;\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "trg_quiz_finished_compute",
      "definition": "CREATE OR REPLACE FUNCTION public.trg_quiz_finished_compute()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$ begin if new.status = 'finished' and (old.status is distinct from 'finished') then perform public.compute_quiz_results(new.id); end if; return new; end; $function$\n"
    },
    {
      "schema": "public",
      "function": "update_streak",
      "definition": "CREATE OR REPLACE FUNCTION public.update_streak(user_uuid uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  -- upsert streak\r\n  insert into public.user_streaks (user_id, last_claimed_at, streak_count)\r\n  values (user_uuid, now(), 1)\r\n  on conflict (user_id) do update\r\n    set last_claimed_at = now(),\r\n        streak_count = user_streaks.streak_count + 1;\r\n\r\n  -- reflect on profile (optional)\r\n  update public.profiles\r\n    set streak_count = coalesce(streak_count, 0) + 1\r\n  where id = user_uuid;\r\n\r\n  -- IMPORTANT: No insert into transactions here (to avoid recursion)\r\nend\r\n$function$\n"
    },
    {
      "schema": "public",
      "function": "update_updated_at_column",
      "definition": "CREATE OR REPLACE FUNCTION public.update_updated_at_column()\n RETURNS trigger\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\nbegin\r\n  new.updated_at = now();\r\n  return new;\r\nend;\r\n$function$\n"
    }
  ],
  "extensions": [
    {
      "extname": "pg_cron"
    },
    {
      "extname": "pg_graphql"
    },
    {
      "extname": "pg_stat_statements"
    },
    {
      "extname": "pgcrypto"
    },
    {
      "extname": "plpgsql"
    },
    {
      "extname": "supabase_vault"
    },
    {
      "extname": "uuid-ossp"
    }
  ]
}
