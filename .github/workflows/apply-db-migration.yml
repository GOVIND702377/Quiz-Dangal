name: Apply Supabase Migration

on:
  workflow_dispatch:
    inputs:
      migration_path:
        description: 'Path to SQL file to apply'
        required: false
        default: 'supabase/migrations/20251011_0001_results_and_wallet.sql'

jobs:
  apply:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Validate inputs
        run: |
          test -n "${{ secrets.SUPABASE_DB_URL }}" || (echo 'Missing repo secret SUPABASE_DB_URL' && exit 1)
          test -f "${{ github.event.inputs.migration_path }}" || (echo "Migration file not found: ${{ github.event.inputs.migration_path }}" && exit 1)

      - name: Apply migration
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          echo "Applying: ${{ github.event.inputs.migration_path }}"
          # Ensure SSL is required; add ?sslmode=require to the URL if not present
          if [[ "$SUPABASE_DB_URL" != *"sslmode="* ]]; then
            if [[ "$SUPABASE_DB_URL" == *"?"* ]]; then
              DB_URL="$SUPABASE_DB_URL&sslmode=require"
            else
              DB_URL="$SUPABASE_DB_URL?sslmode=require"
            fi
          else
            DB_URL="$SUPABASE_DB_URL"
          fi
          psql "$DB_URL" -v ON_ERROR_STOP=1 -f "${{ github.event.inputs.migration_path }}"

      - name: Smoke check (functions exist)
        if: always()
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          if [[ "$SUPABASE_DB_URL" != *"sslmode="* ]]; then
            if [[ "$SUPABASE_DB_URL" == *"?"* ]]; then
              DB_URL="$SUPABASE_DB_URL&sslmode=require"
            else
              DB_URL="$SUPABASE_DB_URL?sslmode=require"
            fi
          else
            DB_URL="$SUPABASE_DB_URL"
          fi
          psql "$DB_URL" -t -A -c "select proname from pg_proc p join pg_namespace n on n.oid=p.pronamespace and n.nspname='public' where proname in ('compute_results_if_due','admin_recompute_quiz_results','get_engagement_counts','get_engagement_counts_many','redeem_from_catalog') order by 1;"